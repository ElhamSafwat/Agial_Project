// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using final_project_Api.Models;

#nullable disable

namespace final_project_Api.Migrations
{
    [DbContext(typeof(AgialContext))]
    partial class AgialContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("final_project_Api.Models.Admin", b =>
                {
                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("User_Id");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("final_project_Api.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Full_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("final_project_Api.Models.Class", b =>
                {
                    b.Property<int>("Class_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Class_ID"));

                    b.Property<string>("Class_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Class_ID");

                    b.ToTable("classes");
                });

            modelBuilder.Entity("final_project_Api.Models.Exam", b =>
                {
                    b.Property<int>("Exam_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Exam_ID"));

                    b.Property<float>("End_Time")
                        .HasColumnType("real");

                    b.Property<DateTime>("Exam_Date")
                        .HasColumnType("date");

                    b.Property<int>("Max_Degree")
                        .HasColumnType("int");

                    b.Property<int>("Min_Degree")
                        .HasColumnType("int");

                    b.Property<float>("Start_Time")
                        .HasColumnType("real");

                    b.Property<string>("Teacher_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("class_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subject_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Exam_ID");

                    b.HasIndex("Teacher_ID");

                    b.ToTable("exam");
                });

            modelBuilder.Entity("final_project_Api.Models.Parent", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.ToTable("parent");
                });

            modelBuilder.Entity("final_project_Api.Models.Parent_Teacher_Feedback", b =>
                {
                    b.Property<int>("Parent_Teacher_Feedback_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Parent_Teacher_Feedback_Id"));

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parent_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Student_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Teacher_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date")
                        .HasColumnType("date");

                    b.HasKey("Parent_Teacher_Feedback_Id");

                    b.HasIndex("Parent_ID");

                    b.HasIndex("Student_ID");

                    b.HasIndex("Teacher_ID");

                    b.ToTable("parent_Teacher_Feedbacks");
                });

            modelBuilder.Entity("final_project_Api.Models.Payment", b =>
                {
                    b.Property<int>("Payment_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Payment_ID"));

                    b.Property<string>("Admin_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Payment_Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Payment_ID");

                    b.HasIndex("Admin_ID");

                    b.HasIndex("Student_ID");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("final_project_Api.Models.Session", b =>
                {
                    b.Property<int>("Session_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Session_ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<float>("End_Time")
                        .HasColumnType("real");

                    b.Property<string>("Material_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Session_Title");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Start_Time")
                        .HasColumnType("real");

                    b.Property<int?>("TC_ID")
                        .HasColumnType("int");

                    b.Property<string>("period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Session_ID");

                    b.HasIndex("TC_ID");

                    b.ToTable("sessions");
                });

            modelBuilder.Entity("final_project_Api.Models.Session_Student", b =>
                {
                    b.Property<int>("Session_Student_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Session_Student_Id"));

                    b.Property<string>("Assignment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Attendance")
                        .HasColumnType("bit");

                    b.Property<float>("Degree")
                        .HasColumnType("real");

                    b.Property<int?>("Session_ID")
                        .HasColumnType("int");

                    b.Property<string>("Student_ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Session_Student_Id");

                    b.HasIndex("Session_ID");

                    b.HasIndex("Student_ID");

                    b.ToTable("Session_Students");
                });

            modelBuilder.Entity("final_project_Api.Models.Student", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Parent_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("enrollmentDate")
                        .HasColumnType("date");

                    b.HasKey("UserId");

                    b.HasIndex("Parent_ID");

                    b.ToTable("students");
                });

            modelBuilder.Entity("final_project_Api.Models.Student_Class", b =>
                {
                    b.Property<int>("Student_Class_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Student_Class_Id"));

                    b.Property<int?>("Class_ID")
                        .HasColumnType("int");

                    b.Property<string>("Student_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("studentsUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Student_Class_Id");

                    b.HasIndex("Class_ID");

                    b.HasIndex("studentsUserId");

                    b.ToTable("student_classes");
                });

            modelBuilder.Entity("final_project_Api.Models.Student_Exam", b =>
                {
                    b.Property<int>("Student_Exam_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Student_Exam_Id"));

                    b.Property<float>("Degree")
                        .HasColumnType("real");

                    b.Property<int?>("Exam_ID")
                        .HasColumnType("int");

                    b.Property<string>("Student_ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Student_Exam_Id");

                    b.HasIndex("Exam_ID");

                    b.HasIndex("Student_ID");

                    b.ToTable("student_Exams");
                });

            modelBuilder.Entity("final_project_Api.Models.Student_Teacher_Feedback", b =>
                {
                    b.Property<int>("Student_Teacher_Feedback_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Student_Teacher_Feedback_Id"));

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Teacher_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date")
                        .HasColumnType("date");

                    b.HasKey("Student_Teacher_Feedback_Id");

                    b.HasIndex("Student_ID");

                    b.HasIndex("Teacher_ID");

                    b.ToTable("student_Teacher_Feedbacks");
                });

            modelBuilder.Entity("final_project_Api.Models.Subject", b =>
                {
                    b.Property<int>("Subject_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Subject_ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Subject_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Subject_ID");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("final_project_Api.Models.Teacher", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Subject_ID")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("Subject_ID");

                    b.ToTable("teachers");
                });

            modelBuilder.Entity("final_project_Api.Models.Teacher_Class", b =>
                {
                    b.Property<int>("TC_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TC_ID"));

                    b.Property<int?>("Class_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Subject_ID")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectsSubject_ID")
                        .HasColumnType("int");

                    b.Property<string>("Teacher_ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TC_ID");

                    b.HasIndex("Class_ID");

                    b.HasIndex("SubjectsSubject_ID");

                    b.HasIndex("Teacher_ID");

                    b.ToTable("teacher_Classes");
                });

            modelBuilder.Entity("final_project_Api.Models.Teacher_Stage", b =>
                {
                    b.Property<int>("Teacher_Stage_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Teacher_Stage_Id"));

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Teacher_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Teacher_Stage_Id");

                    b.HasIndex("Teacher_Id");

                    b.ToTable("teacher_Stages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("final_project_Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("final_project_Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("final_project_Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("final_project_Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("final_project_Api.Models.Admin", b =>
                {
                    b.HasOne("final_project_Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("final_project_Api.Models.Exam", b =>
                {
                    b.HasOne("final_project_Api.Models.Teacher", "Tech")
                        .WithMany("exams")
                        .HasForeignKey("Teacher_ID");

                    b.Navigation("Tech");
                });

            modelBuilder.Entity("final_project_Api.Models.Parent", b =>
                {
                    b.HasOne("final_project_Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("final_project_Api.Models.Parent_Teacher_Feedback", b =>
                {
                    b.HasOne("final_project_Api.Models.Parent", "Parent")
                        .WithMany("Parent_Teacher_feadback")
                        .HasForeignKey("Parent_ID");

                    b.HasOne("final_project_Api.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Student_ID");

                    b.HasOne("final_project_Api.Models.Teacher", "Teacher")
                        .WithMany("Parent_Teacher_FeedBacks")
                        .HasForeignKey("Teacher_ID");

                    b.Navigation("Parent");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("final_project_Api.Models.Payment", b =>
                {
                    b.HasOne("final_project_Api.Models.Admin", "admin")
                        .WithMany("Payment")
                        .HasForeignKey("Admin_ID");

                    b.HasOne("final_project_Api.Models.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("Student_ID");

                    b.Navigation("Student");

                    b.Navigation("admin");
                });

            modelBuilder.Entity("final_project_Api.Models.Session", b =>
                {
                    b.HasOne("final_project_Api.Models.Teacher_Class", "Teacher_Class")
                        .WithMany("Sessions")
                        .HasForeignKey("TC_ID");

                    b.Navigation("Teacher_Class");
                });

            modelBuilder.Entity("final_project_Api.Models.Session_Student", b =>
                {
                    b.HasOne("final_project_Api.Models.Session", "Session")
                        .WithMany("session_Students")
                        .HasForeignKey("Session_ID");

                    b.HasOne("final_project_Api.Models.Student", "Student")
                        .WithMany("Session_Students")
                        .HasForeignKey("Student_ID");

                    b.Navigation("Session");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("final_project_Api.Models.Student", b =>
                {
                    b.HasOne("final_project_Api.Models.Parent", "parent")
                        .WithMany("Students")
                        .HasForeignKey("Parent_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("final_project_Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("parent");
                });

            modelBuilder.Entity("final_project_Api.Models.Student_Class", b =>
                {
                    b.HasOne("final_project_Api.Models.Class", "classs")
                        .WithMany("Student_Class")
                        .HasForeignKey("Class_ID");

                    b.HasOne("final_project_Api.Models.Student", "students")
                        .WithMany("Student_Classes")
                        .HasForeignKey("studentsUserId");

                    b.Navigation("classs");

                    b.Navigation("students");
                });

            modelBuilder.Entity("final_project_Api.Models.Student_Exam", b =>
                {
                    b.HasOne("final_project_Api.Models.Exam", "Exam")
                        .WithMany("Student_Exam")
                        .HasForeignKey("Exam_ID");

                    b.HasOne("final_project_Api.Models.Student", "Student")
                        .WithMany("Student_Exams")
                        .HasForeignKey("Student_ID");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("final_project_Api.Models.Student_Teacher_Feedback", b =>
                {
                    b.HasOne("final_project_Api.Models.Student", "Student")
                        .WithMany("Students_Teachers_FeedBack")
                        .HasForeignKey("Student_ID");

                    b.HasOne("final_project_Api.Models.Teacher", "Teacher")
                        .WithMany("student_Teacher_FeedBacks")
                        .HasForeignKey("Teacher_ID");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("final_project_Api.Models.Teacher", b =>
                {
                    b.HasOne("final_project_Api.Models.Subject", "subject")
                        .WithMany("teachers")
                        .HasForeignKey("Subject_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("final_project_Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("subject");
                });

            modelBuilder.Entity("final_project_Api.Models.Teacher_Class", b =>
                {
                    b.HasOne("final_project_Api.Models.Class", "Class")
                        .WithMany("Teacher_Class")
                        .HasForeignKey("Class_ID");

                    b.HasOne("final_project_Api.Models.Subject", "Subjects")
                        .WithMany()
                        .HasForeignKey("SubjectsSubject_ID");

                    b.HasOne("final_project_Api.Models.Teacher", "Teacher")
                        .WithMany("teacher_Classes")
                        .HasForeignKey("Teacher_ID");

                    b.Navigation("Class");

                    b.Navigation("Subjects");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("final_project_Api.Models.Teacher_Stage", b =>
                {
                    b.HasOne("final_project_Api.Models.Teacher", "teacher")
                        .WithMany("teacher_Stages")
                        .HasForeignKey("Teacher_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("final_project_Api.Models.Admin", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("final_project_Api.Models.Class", b =>
                {
                    b.Navigation("Student_Class");

                    b.Navigation("Teacher_Class");
                });

            modelBuilder.Entity("final_project_Api.Models.Exam", b =>
                {
                    b.Navigation("Student_Exam");
                });

            modelBuilder.Entity("final_project_Api.Models.Parent", b =>
                {
                    b.Navigation("Parent_Teacher_feadback");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("final_project_Api.Models.Session", b =>
                {
                    b.Navigation("session_Students");
                });

            modelBuilder.Entity("final_project_Api.Models.Student", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Session_Students");

                    b.Navigation("Student_Classes");

                    b.Navigation("Student_Exams");

                    b.Navigation("Students_Teachers_FeedBack");
                });

            modelBuilder.Entity("final_project_Api.Models.Subject", b =>
                {
                    b.Navigation("teachers");
                });

            modelBuilder.Entity("final_project_Api.Models.Teacher", b =>
                {
                    b.Navigation("Parent_Teacher_FeedBacks");

                    b.Navigation("exams");

                    b.Navigation("student_Teacher_FeedBacks");

                    b.Navigation("teacher_Classes");

                    b.Navigation("teacher_Stages");
                });

            modelBuilder.Entity("final_project_Api.Models.Teacher_Class", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
